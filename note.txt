27/02/2022:
1) A closer look at JSX
In JSX, we can write code just like HTML tags but it's not a real HTML tags, it's just help we easily to return what we want to display 
	in the component.
In the older versions of React we have to import lib React from 'react' in every single component (we can search some project to watch 
	how to return a JSX in older way).
When we return what we want to display in our components, we have to make sure that there is only an element (we can return an array of elements)
	but we cannot return more than one element that is the reason why we should use a div tag to wrapper what we return.

28/02/2022:
1) Organizing component files:
It's up to you to organize your component (files) with your subfolder to management and maintain easily
2) Alternative function syntax:
You can use arrow function syntax in your React component
3) Listening to Events & Working with Events Handling (important, key concept):
Let's talk about button in React component, React exposes all default events with "on".
For instance: <button onClick={function_name()}></button>
Another thing is when we created a function for event handling in the button above, we should consider what type that we define that function in onClick event:
For example: 
	*<button onClick={function_name}></button>, when we define like this, it means when user click the button then event handler then executed
	*<button onClick={function_name()}></button>, the function that declared in event onClick will be execute immediate for one time before user click the button. 
There is a convenient way when we create a function name for event: clickHander()

01/03/2022:
1) How Components Functions Are Executed: (need to watch again)
2) Working with "state": (need to watch again)

02/03/2022:
1) A closer look at "useState" Hook:
When working data changes in React, you should use "State" concept (a key concept in react library) because when the app started at the first time, components initially rendered for just one time and then it never repeat again and that is the way React works with data
In order to use "State" we import {useState} from "react" lib in our component and define what object would be changed in the future
For example: const [title, setTitle] = useState(props);
In this example above, we defined an array with 2 elements, first is the variable we can interact with (display) and the second is just like a method that we use for change the value (or data) for the first element.
For example: 
	const [title, setTitle] = useState(expenseTitle);
	// title = "Title"
	setTitle("Hello World");
	// title = "Hello World"
When calling setTitle to set a new value then the component will be execute again

03/03/2022:
1) Adding Form Inputs:
2) Listening User Inputs:
- Add listener event for input such as onChange and using event as a parameter which is imported into the function for event handler
3) Working with multiple "State":
- I can use multiple State in a component.
4) Using One State Instead (What's Better):
5) Updating State That Depends On The Previous State:
- To answer the question "which is better between using multiple states or just a single state in React component?"
- React document suggests us should split multiple State in any single component, in order to ensure the data integrity
6) Handling Form Submission:
- using e.preventDefault() to prevent submit event (sending request to browser from form).

07/03/2022:
1) Adding two way binding:
- Using "value" attribute (just like HTML) to display the value we set in the input
2) Child to parent component communicate (bottom-up):
- Using props to communicate data between children and parent component.
3) Lifting the State Up: (should watch again)

15/03/2022:
1) Practice: Adding ExpenseFilter component
2) Controlled & Uncontrolled Stateless & Stateful Components:
- Stateful component means there are many state to handle data (create/update/delete)
- Stateless component means that is a component just display data without any actions

19/03/2022:
Module 5: Redering Lists & Condition content:
1) Rendering Lists of Data:
- using "{}" in return statement to handle JS code in React component
- learn about new built-in js function: array.map()
- when rendering items in an array (or list) into children component, we definde "key" attribute for every time pass the item into child component.
Because React use "key" to identify which component is deleted or changed when rendering.
Read more info about "key" attribute: https://vi.reactjs.org/docs/lists-and-keys.html
2) Using Stateful Lists:
- In order add a new item into a list then pass it into child component, we use "useState" like we did practice on another component.
But noted an important thing that we have to update the previous state when we put a new item into the array (or list).
3) Understanding "Keys":
- Take a look at the description in the first lesson of the day.
Practice filter elements in array expenses with array.filter() built-in method.
4) Output conditional content:
- We can use operator "? :" into the JSX code that wrapped in curly braces ({}) or just simplify by define a variable outsite JSX area.
